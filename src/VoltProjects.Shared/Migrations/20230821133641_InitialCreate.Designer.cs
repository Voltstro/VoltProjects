// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoltProjects.Shared;
using VoltProjects.Shared.Models;

#nullable disable

namespace VoltProjects.Shared.Migrations
{
    [DbContext(typeof(VoltProjectDbContext))]
    [Migration("20230821133641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VoltProjects.Shared.Models.DocBuilder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Arguments")
                        .HasColumnType("text[]")
                        .HasColumnName("Arguments");

                    b.Property<string[]>("EnvironmentVariables")
                        .HasColumnType("text[]")
                        .HasColumnName("EnvironmentVariables");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocBuilder");

                    b.HasData(
                        new
                        {
                            Id = "vdocfx",
                            Application = "vdocfx",
                            Arguments = new[] { "build", "--output-type PageJson", "--output {0}" },
                            EnvironmentVariables = new[] { "DOCS_GITHUB_TOKEN=" },
                            Name = "VDocFx"
                        });
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "en"
                        });
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectBuildEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GitHash")
                        .IsRequired()
                        .HasMaxLength(41)
                        .HasColumnType("character varying(41)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Successful")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ProjectVersionId");

                    b.ToTable("ProjectBuildEvent");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<LinkItem>("LinkItem")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectVersionId")
                        .IsUnique();

                    b.ToTable("ProjectMenu");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aside")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectTocId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TitleDisplay")
                        .HasColumnType("boolean");

                    b.Property<string>("TocRel")
                        .HasColumnType("text");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectTocId");

                    b.HasIndex("ProjectVersionId", "Path")
                        .IsUnique();

                    b.ToTable("ProjectPage");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPageContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GitHubUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.HasIndex("PageId", "GitHubUserId")
                        .IsUnique();

                    b.ToTable("ProjectPageContributor");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPreBuild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Arguments")
                        .HasColumnType("text");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectVersionId");

                    b.ToTable("ProjectPreBuild");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectToc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectVersionId")
                        .HasColumnType("integer");

                    b.Property<LinkItem>("TocItem")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TocRel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectVersionId", "TocRel")
                        .IsUnique();

                    b.ToTable("ProjectToc");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DocBuilderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocsBuiltPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocsPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitTag")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("VersionTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocBuilderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProjectId", "VersionTag", "LanguageId")
                        .IsUnique();

                    b.HasIndex("ProjectId", "VersionTag", "LanguageId", "IsDefault")
                        .IsUnique()
                        .HasFilter("\"IsDefault\" = true");

                    b.ToTable("ProjectVersion");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectBuildEvent", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectVersion", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectMenu", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectVersion", "ProjectVersion")
                        .WithMany("ProjectsMenus")
                        .HasForeignKey("ProjectVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectVersion");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPage", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectToc", "ProjectToc")
                        .WithMany()
                        .HasForeignKey("ProjectTocId");

                    b.HasOne("VoltProjects.Shared.Models.ProjectVersion", "ProjectVersion")
                        .WithMany()
                        .HasForeignKey("ProjectVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectToc");

                    b.Navigation("ProjectVersion");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPageContributor", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectPage", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectPreBuild", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectVersion", "ProjectVersion")
                        .WithMany("PreBuildCommands")
                        .HasForeignKey("ProjectVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectVersion");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectToc", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.ProjectVersion", "ProjectVersion")
                        .WithMany()
                        .HasForeignKey("ProjectVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectVersion");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectVersion", b =>
                {
                    b.HasOne("VoltProjects.Shared.Models.DocBuilder", "DocBuilder")
                        .WithMany()
                        .HasForeignKey("DocBuilderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoltProjects.Shared.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoltProjects.Shared.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocBuilder");

                    b.Navigation("Language");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("VoltProjects.Shared.Models.ProjectVersion", b =>
                {
                    b.Navigation("PreBuildCommands");

                    b.Navigation("ProjectsMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
